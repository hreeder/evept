service: evept-backend

provider:
  name: aws
  runtime: python3.6
  region: eu-west-1
  tracing: true

  environment:
    DYNAMO_TABLE_NAME: ${self:custom.tableName}
    SQS_CHARACTER_UPDATER:
      Fn::GetAtt: [ UpdateCharacterQueue, Arn ]
    ESI_CLIENTID: ${self:custom.esiClientName}
    ESI_SECRET: ${self:custom.esiSecretName}
  
  iamRoleStatements:
    # DynamoDB
    - Effect: Allow
      Action:
        - DynamoDB:DescribeTable
        - DynamoDB:Query
        - DynamoDB:Scan
        - DynamoDB:GetItem
        - DynamoDB:PutItem
        - DynamoDB:UpdateItem
        - DynamoDB:DeleteItem
      Resource:
        - "Fn::GetAtt": [ EvePTAppTable, Arn ]
    # SQS
    - Effect: Allow
      Action:
        - SQS:GetQueueURL
        - SQS:ListQueues
        - SQS:SendMessage
      Resource:
        - "Fn::GetAtt": [ UpdateCharacterQueue, Arn ]
    # SSM Secrets
    - Effect: Allow
      Action:
        - SSM:GetParameter
        - SSM:GetParameters
      Resource:
        - Fn::Join:
            - ""
            - - "arn:aws:ssm:"
              - ${self:provider.region}
              - ":"
              - Ref: 'AWS::AccountId'
              - ":parameter/"
              - ${self:custom.esiClientName}
        - Fn::Join:
            - ""
            - - "arn:aws:ssm:"
              - ${self:provider.region}
              - ":"
              - Ref: 'AWS::AccountId'
              - ":parameter/"
              - ${self:custom.esiSecretName}
    # XRay
    - Effect: Allow
      Action:
        - XRay:PutTraceSegments
        - XRay:PutTelemetryRecords
      Resource:
        - "*"


functions:
  evept:
    handler: router.entrypoint
    timeout: 30
    events:
      - http:
          path: /{route+}
          method: any
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:eu-west-1:462273424391:userpool/eu-west-1_men0NN1Iy

  updateCharacter:
    runtime: go1.x
    handler: characterUpdater
    package:
      artifact: characterUpdater/build/lambda.zip
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ UpdateCharacterQueue, Arn ]

  dispatcher:
    handler: evept.updater.dispatch.dispatch_hourly
    events:
      - schedule: rate(1 hour)

resources:
  Resources:
    # API Gateway Custom Responses
    #   These are so we return the right CORS headers
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    # DynamoDB table in use for the app
    EvePTAppTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: resourceType
            AttributeType: S
          - AttributeName: resourceIdentifier
            AttributeType: S
        KeySchema:
          - AttributeName: resourceType
            KeyType: HASH
          - AttributeName: resourceIdentifier
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}

    # SQS Queue for updating characters
    UpdateCharacterQueue:
      Type: AWS::SQS::Queue

plugins:
  - serverless-stack-output
  - serverless-python-requirements
  - serverless-plugin-tracing

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-evept
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}

  esiClientName: evept-esi-clientid-${self:custom.stage}
  esiSecretName: evept-esi-secret-${self:custom.stage}

  # Plugin: serverless-python-requirements
  pythonRequirements:
    dockerizePip: non-linux
  
  # Plugin: serverless-stack-output
  output:
    file: .build/stack.json
